/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package soproject.application.forms;

import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;
import so.project.monitoring.LocalMonitoring;

/**
 *
 * @author Mauros
 */
public class Program extends javax.swing.JFrame {

    /**
     * Creates new form Program
     */
    
    private boolean monitoring = false;
    
    public Program() {
        initComponents();
        this.initImg();
        
        threadTest();
        
    }

    
    public void threadTest (){
     Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    try {
                        // Atualiza a janela
                        SwingUtilities.invokeLater(new Runnable() {
                            @Override
                            public void run() {
                                if(monitoringTB.isSelected()){
                                refreshLocalStats();
                                }
                            }
                        });
                        // Aguarda 5 segundos
                        Thread.sleep(10000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        });
        thread.start();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        localstationL = new javax.swing.JLabel();
        serverL = new javax.swing.JLabel();
        clientsideL = new javax.swing.JLabel();
        serversideL1 = new javax.swing.JLabel();
        wallL = new javax.swing.JLabel();
        StatsSL = new javax.swing.JLabel();
        StatsCL1 = new javax.swing.JLabel();
        memCL = new javax.swing.JLabel();
        cpuCL = new javax.swing.JLabel();
        diskCL = new javax.swing.JLabel();
        cpuSL = new javax.swing.JLabel();
        memSL = new javax.swing.JLabel();
        diskSL = new javax.swing.JLabel();
        portL = new javax.swing.JLabel();
        portFieldL = new javax.swing.JTextField();
        hostL = new javax.swing.JLabel();
        hostFieldL = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        portL1 = new javax.swing.JLabel();
        hostFieldL1 = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        execMB = new javax.swing.JButton();
        execHB = new javax.swing.JButton();
        portL2 = new javax.swing.JLabel();
        monitoringImgL = new javax.swing.JLabel();
        dockerImgL = new javax.swing.JLabel();
        ipAdressL = new javax.swing.JLabel();
        loadDiskL = new javax.swing.JLabel();
        loadCPUL = new javax.swing.JLabel();
        loadMemL = new javax.swing.JLabel();
        bugImgL = new javax.swing.JLabel();
        loadL = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        transferL = new javax.swing.JLabel();
        transferL1 = new javax.swing.JLabel();
        transferL2 = new javax.swing.JLabel();
        transferL3 = new javax.swing.JLabel();
        portL3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        diskperL = new javax.swing.JLabel();
        cpuperL = new javax.swing.JLabel();
        memPerL = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        statsBackgroundCL = new javax.swing.JLabel();
        statsBackgroundSL = new javax.swing.JLabel();
        background = new javax.swing.JLabel();
        diskBackgroundL = new javax.swing.JLabel();
        cpuBackgroundL = new javax.swing.JLabel();
        memBackgroundL = new javax.swing.JLabel();
        monitoringTB = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Projeto SO - WIP");
        setMaximumSize(new java.awt.Dimension(600, 750));
        setMinimumSize(new java.awt.Dimension(600, 750));
        setPreferredSize(new java.awt.Dimension(610, 780));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        localstationL.setBackground(new java.awt.Color(16, 16, 16));
        localstationL.setForeground(new java.awt.Color(16, 16, 16));
        localstationL.setText("jLabel2");
        getContentPane().add(localstationL, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 60, 80, 80));

        serverL.setBackground(new java.awt.Color(16, 16, 16));
        serverL.setForeground(new java.awt.Color(16, 16, 16));
        serverL.setText("jLabel2");
        getContentPane().add(serverL, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 60, 80, 80));

        clientsideL.setBackground(new java.awt.Color(255, 255, 255));
        clientsideL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        clientsideL.setText("Server Side");
        clientsideL.setOpaque(true);
        getContentPane().add(clientsideL, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 40, 80, -1));

        serversideL1.setBackground(new java.awt.Color(255, 255, 255));
        serversideL1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        serversideL1.setText("Client Side");
        serversideL1.setOpaque(true);
        getContentPane().add(serversideL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 40, 80, -1));

        wallL.setBackground(new java.awt.Color(51, 51, 51));
        wallL.setOpaque(true);
        getContentPane().add(wallL, new org.netbeans.lib.awtextra.AbsoluteConstraints(294, 40, 10, 210));

        StatsSL.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        StatsSL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        StatsSL.setText("Monitoring");
        StatsSL.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        getContentPane().add(StatsSL, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 140, 90, 20));

        StatsCL1.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        StatsCL1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        StatsCL1.setText("Monitoring");
        StatsCL1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        getContentPane().add(StatsCL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, 90, 20));

        memCL.setMaximumSize(new java.awt.Dimension(34, 14));
        memCL.setMinimumSize(new java.awt.Dimension(34, 14));
        memCL.setPreferredSize(new java.awt.Dimension(34, 14));
        getContentPane().add(memCL, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, -1, 30));

        cpuCL.setPreferredSize(new java.awt.Dimension(34, 14));
        getContentPane().add(cpuCL, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 160, -1, 30));

        diskCL.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        diskCL.setToolTipText("");
        diskCL.setPreferredSize(new java.awt.Dimension(34, 14));
        getContentPane().add(diskCL, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 160, -1, 30));

        cpuSL.setMaximumSize(new java.awt.Dimension(34, 14));
        cpuSL.setMinimumSize(new java.awt.Dimension(34, 14));
        cpuSL.setPreferredSize(new java.awt.Dimension(34, 14));
        getContentPane().add(cpuSL, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 160, -1, 30));

        memSL.setMaximumSize(new java.awt.Dimension(34, 14));
        memSL.setMinimumSize(new java.awt.Dimension(34, 14));
        memSL.setPreferredSize(new java.awt.Dimension(34, 14));
        getContentPane().add(memSL, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 200, -1, 30));

        diskSL.setMaximumSize(new java.awt.Dimension(34, 14));
        diskSL.setMinimumSize(new java.awt.Dimension(34, 14));
        diskSL.setPreferredSize(new java.awt.Dimension(34, 14));
        getContentPane().add(diskSL, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 160, -1, 30));

        portL.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        portL.setText("Monitoring Settings");
        getContentPane().add(portL, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 380, -1, -1));
        getContentPane().add(portFieldL, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 330, 160, -1));

        hostL.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        hostL.setText("Remote Host Settings");
        getContentPane().add(hostL, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 270, -1, -1));
        getContentPane().add(hostFieldL, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 420, 160, -1));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 370, 600, 10));

        portL1.setText("Baud Rate");
        getContentPane().add(portL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 400, -1, -1));
        getContentPane().add(hostFieldL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 330, 240, -1));
        getContentPane().add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 450, 600, 10));

        execMB.setText("Run");
        execMB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                execMBActionPerformed(evt);
            }
        });
        getContentPane().add(execMB, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 390, 130, 50));

        execHB.setText("Run");
        execHB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                execHBActionPerformed(evt);
            }
        });
        getContentPane().add(execHB, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 310, 130, 50));

        portL2.setText("Port");
        getContentPane().add(portL2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 310, -1, -1));
        getContentPane().add(monitoringImgL, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 380, 30, 30));
        getContentPane().add(dockerImgL, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 270, 30, 30));

        ipAdressL.setText("IP Address");
        getContentPane().add(ipAdressL, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, -1, -1));

        loadDiskL.setPreferredSize(new java.awt.Dimension(34, 14));
        getContentPane().add(loadDiskL, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 540, -1, 30));

        loadCPUL.setPreferredSize(new java.awt.Dimension(34, 14));
        getContentPane().add(loadCPUL, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 540, -1, 30));

        loadMemL.setPreferredSize(new java.awt.Dimension(34, 14));
        getContentPane().add(loadMemL, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 540, -1, 30));
        getContentPane().add(bugImgL, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 460, 30, 30));

        loadL.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        loadL.setText("Load Settings");
        getContentPane().add(loadL, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 470, -1, -1));

        jButton1.setText("Decrease Usage");
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 640, 130, 50));

        jButton2.setText("Increase Usage");
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 580, 130, 50));

        jButton3.setText("Decrease Usage");
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 640, 130, 50));

        jButton4.setText("Increase Usage");
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 580, 130, 50));

        jButton5.setText("Increase Usage");
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 580, 130, 50));

        jButton6.setText("Decrease Usage");
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 640, 130, 50));
        getContentPane().add(transferL, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 70, 130, 20));
        getContentPane().add(transferL1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 70, 130, 20));
        getContentPane().add(transferL2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 90, 130, 20));
        getContentPane().add(transferL3, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 90, 130, 20));

        portL3.setText("Port");
        getContentPane().add(portL3, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 400, -1, -1));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "10 seconds" }));
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 420, -1, -1));

        diskperL.setText("0%");
        getContentPane().add(diskperL, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 160, -1, 30));

        cpuperL.setText("0%");
        getContentPane().add(cpuperL, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 160, -1, 30));

        memPerL.setText("0%");
        getContentPane().add(memPerL, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 200, -1, 30));

        jButton7.setBackground(new java.awt.Color(255, 255, 255));
        jButton7.setText("↺");
        getContentPane().add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 200, 50, -1));

        jButton8.setBackground(new java.awt.Color(255, 255, 255));
        jButton8.setText("↺");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 200, 50, -1));

        statsBackgroundCL.setBackground(new java.awt.Color(255, 255, 255));
        statsBackgroundCL.setForeground(new java.awt.Color(255, 255, 255));
        statsBackgroundCL.setText("jLabel1");
        statsBackgroundCL.setOpaque(true);
        getContentPane().add(statsBackgroundCL, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, 200, 100));

        statsBackgroundSL.setBackground(new java.awt.Color(255, 255, 255));
        statsBackgroundSL.setForeground(new java.awt.Color(255, 255, 255));
        statsBackgroundSL.setText("jLabel1");
        statsBackgroundSL.setOpaque(true);
        getContentPane().add(statsBackgroundSL, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 130, 200, 100));

        background.setBackground(new java.awt.Color(16, 16, 16));
        background.setForeground(new java.awt.Color(16, 16, 16));
        background.setOpaque(true);
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 260));

        diskBackgroundL.setBackground(new java.awt.Color(16, 16, 16));
        diskBackgroundL.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.white, null, null));
        diskBackgroundL.setOpaque(true);
        getContentPane().add(diskBackgroundL, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 530, 150, 170));

        cpuBackgroundL.setBackground(new java.awt.Color(16, 16, 16));
        cpuBackgroundL.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.white, null, null));
        cpuBackgroundL.setOpaque(true);
        getContentPane().add(cpuBackgroundL, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 530, 150, 170));

        memBackgroundL.setBackground(new java.awt.Color(16, 16, 16));
        memBackgroundL.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, null, java.awt.Color.white, null, null));
        memBackgroundL.setOpaque(true);
        getContentPane().add(memBackgroundL, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 530, 150, 170));

        monitoringTB.setText("On/Off");
        getContentPane().add(monitoringTB, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 420, -1, 27));

        jLabel1.setText("Auto-stats");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(54, 400, -1, -1));

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void execHBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_execHBActionPerformed
        // TODO add your handling code here:
        Image localStation = this.getScaledImage("imgs/windowsHost.png", localstationL,true);
        setScaledImage(localstationL, localStation);
        Image server = this.getScaledImage("imgs/linuxHost.png", serverL,true);
        setScaledImage(serverL, server);
        
        Image transferRight = this.getScaledImage("imgs/line.gif", bugImgL,false);
        setScaledImage(transferL, transferRight);
        setScaledImage(transferL1, transferRight);
    }//GEN-LAST:event_execHBActionPerformed

    private void execMBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_execMBActionPerformed
        // TODO add your handling code here:
        Image transferLeft = this.getScaledImage("imgs/lineR.gif", bugImgL,false);
        setScaledImage(transferL2, transferLeft);
        setScaledImage(transferL3, transferLeft);
    }//GEN-LAST:event_execMBActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        refreshLocalStats();
    }//GEN-LAST:event_jButton8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Program.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Program.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Program.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Program.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Program().setVisible(true);
                
            }
        });
    }
    
    private void refreshLocalStats(){
        
        memPerL.setText(LocalMonitoring.getMemory());
        cpuperL.setText(LocalMonitoring.getCPU());
        double diskUsage = Double.parseDouble(LocalMonitoring.getDisk());
        diskperL.setText(String.format("%.2f%%", diskUsage));
     
    }
    
    private void initImg() {
        //ScaledImages
        Image localStation = this.getScaledImage("imgs/Host.png", localstationL,true);
        Image server = this.getScaledImage("imgs/Host.png", serverL,true);
        Image cpu = this.getScaledImage("imgs/cpu.png", cpuCL,true);
        Image mem = this.getScaledImage("imgs/mem.png", memCL,true);
        Image disk = this.getScaledImage("imgs/disk.png", diskCL,true);
        Image monitoringImg = this.getScaledImage("imgs/validate.png", monitoringImgL,true);
        Image dockerImg = this.getScaledImage("imgs/docker.png", dockerImgL,true);
        Image bugImg = this.getScaledImage("imgs/bug.png", bugImgL,true);
        
        
        
        
        //Setter Images
        setScaledImage(serverL, server);
        setScaledImage(localstationL, localStation);
        setScaledImage(cpuCL, cpu);
        setScaledImage(memCL, mem);
        setScaledImage(diskCL, disk);
        setScaledImage(cpuSL, cpu);
        setScaledImage(memSL, mem);
        setScaledImage(diskSL, disk);
        setScaledImage(monitoringImgL, monitoringImg);
        setScaledImage(dockerImgL, dockerImg);
        setScaledImage(bugImgL, bugImg);
        setScaledImage(loadCPUL, cpu);
        setScaledImage(loadMemL, mem);
        setScaledImage(loadDiskL, disk);


    }
    
    private Image getScaledImage(String directory, javax.swing.JLabel label, boolean scaled){
       ImageIcon icon = new ImageIcon(getClass().getClassLoader().getResource(directory)); 
       Image image = icon.getImage();
       
       if (scaled){
       Image ScaledImage = image.getScaledInstance(label.getWidth(), label.getHeight(), image.SCALE_SMOOTH);
       return ScaledImage;
       } else {
           return image;
       }
    }
    
    private void setScaledImage(javax.swing.JLabel label, Image image){
        label.setIcon(new javax.swing.ImageIcon(image));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel StatsCL1;
    private javax.swing.JLabel StatsSL;
    private javax.swing.JLabel background;
    private javax.swing.JLabel bugImgL;
    private javax.swing.JLabel clientsideL;
    private javax.swing.JLabel cpuBackgroundL;
    private javax.swing.JLabel cpuCL;
    private javax.swing.JLabel cpuSL;
    private javax.swing.JLabel cpuperL;
    private javax.swing.JLabel diskBackgroundL;
    private javax.swing.JLabel diskCL;
    private javax.swing.JLabel diskSL;
    private javax.swing.JLabel diskperL;
    private javax.swing.JLabel dockerImgL;
    private javax.swing.JButton execHB;
    private javax.swing.JButton execMB;
    private javax.swing.JTextField hostFieldL;
    private javax.swing.JTextField hostFieldL1;
    private javax.swing.JLabel hostL;
    private javax.swing.JLabel ipAdressL;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel loadCPUL;
    private javax.swing.JLabel loadDiskL;
    private javax.swing.JLabel loadL;
    private javax.swing.JLabel loadMemL;
    private javax.swing.JLabel localstationL;
    private javax.swing.JLabel memBackgroundL;
    private javax.swing.JLabel memCL;
    private javax.swing.JLabel memPerL;
    private javax.swing.JLabel memSL;
    private javax.swing.JLabel monitoringImgL;
    private javax.swing.JToggleButton monitoringTB;
    private javax.swing.JTextField portFieldL;
    private javax.swing.JLabel portL;
    private javax.swing.JLabel portL1;
    private javax.swing.JLabel portL2;
    private javax.swing.JLabel portL3;
    private javax.swing.JLabel serverL;
    private javax.swing.JLabel serversideL1;
    private javax.swing.JLabel statsBackgroundCL;
    private javax.swing.JLabel statsBackgroundSL;
    private javax.swing.JLabel transferL;
    private javax.swing.JLabel transferL1;
    private javax.swing.JLabel transferL2;
    private javax.swing.JLabel transferL3;
    private javax.swing.JLabel wallL;
    // End of variables declaration//GEN-END:variables
}
